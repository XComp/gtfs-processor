buildscript {
    ext {
        javaVersion = '1.8'
        scalaVersion = '2.12'
        springBootVersion = '2.2.6.RELEASE'
        junitVersion = '5.6.1'
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}" apply false
    id 'io.spring.dependency-management' version '1.0.8.RELEASE' apply false
    id 'com.avast.gradle.docker-compose' version '0.9.4'
}

apply plugin: 'idea'

allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

subprojects {
    if (!name.contains("generic")) {
        apply plugin: 'org.springframework.boot'
    }

    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    configurations {
        developmentOnly
        runtimeClasspath.extendsFrom developmentOnly
        compileOnly.extendsFrom annotationProcessor
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR1"
        }

        dependencies {
            dependency group: 'org.projectlombok', name: 'lombok', version: '1.18.12'

            dependency(group: 'org.apache.spark', name: "spark-sql_${scalaVersion}", version: '2.4.5') {
                exclude group: 'org.apache.logging.log4j', name: 'log4j'
                exclude group: 'org.slf4j', name: 'slf4j-log4j12'
            }
            // we have to force version 3.0.9
            // the janino dependency got mysterically upgraded to 3.1.0 which caused problems since the InternalCompilerException class
            // was moved in 3.1.0. Spark was not able to locate the class in the old location anymore.
            dependency group: 'org.codehaus.janino', name: 'janino', version: '3.0.9'
        }
    }

    dependencies {
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
    }

    test {
        useJUnitPlatform()
    }
}

dockerCompose {
    // captureContainersOutput = true
    captureContainersOutput = false
    stopContainers = true
    removeContainers = true
    removeImages = "Local"
    removeVolumes = true
    removeOrphans = true
    forceRecreate = true
    waitForTcpPorts = false
    projectName = project.name
}

project.subprojects.each { subProject ->
    subProject.test.dependsOn composeUp
    subProject.test.finalizedBy composeDown
}
